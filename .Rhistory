a = 1
b = 2
c = a + b
print(c)
lm.fit(x =x , y =)
install.packages("KFAS")
install.packages("dlm")
load(dlm)
load(dml)
dlm
help("dlm")
library(dlm)
library(KFAS)
data("Nile")
data
library(dlm)
library(KFAS)
model = SSModel(Nile ~ SSMtrend(1,Q=list(matrix(NA))), H=matrix(NA))
model
model = fitSSM(inits=c(log(var(Nile)),log(var(Nile))))
model = fitSSM(inits=c(log(var(Nile)),log(var(Nile))), model=model,
method="BFGS")
model
model$model
out = KFS(model, filtering="state",smoothing = c("state","disturbance"),
simplify = F)
model = fitSSM(inits=c(log(var(Nile)),log(var(Nile))), model=model,
method="BFGS")$model
data(Nile)
model = SSModel(Nile ~ SSMtrend(1,Q=list(matrix(NA))), H=matrix(NA))
model = fitSSM(inits=c(log(var(Nile)),log(var(Nile))), model=model,
method="BFGS")$model
out = KFS(model, filtering="state",smoothing = c("state","disturbance"),
simplify = F)
out
conf.bands = cbind(out$a, as.vector(out$a) + (sqrt(cbind(out&P))*
qnorm(0.95)%*%
(t(c(-1,1)))))
model = SSModel(Nile ~ SSMtrend(1,Q=list(matrix(NA))), H=matrix(NA))
model = fitSSM(inits=c(log(var(Nile)),log(var(Nile))), model=model,
method="BFGS")$model
out = KFS(model, filtering="state",smoothing = c("state","disturbance"),
simplify = F)
### Plotting results
par(mfrow=c(2,2))
conf.bands = cbind(out$a, as.vector(out$a) +
(sqrt(cbind(out&P))*qnorm(0.95))%*% (t(c(-1,1))))
out$P
par(mfrow=c(2,2))
conf.bands = cbind(out$a, as.vector(out$a) +
(sqrt(cbind(out&P))*qnorm(0.95))%*% (t(c(-1,1))))
cbind(out$P)
model = SSModel(Nile ~ SSMtrend(1,Q=list(matrix(NA))), H=matrix(NA))
model = fitSSM(inits=c(log(var(Nile)),log(var(Nile))), model=model,
method="BFGS")$model
out = KFS(model, filtering="state",smoothing = c("state","disturbance"),
simplify = F)
### Plotting results
par(mfrow=c(2,2))
conf.bands = cbind(out$a, as.vector(out$a) +
(sqrt(cbind(out$P))*qnorm(0.95))%*% (t(c(-1,1)) ) )
temp = cbind(Nile, conf.bands[-1,])
cols = c("grey","blue","red","red")
cols
model = SSModel(Nile ~ SSMtrend(1,Q=list(matrix(NA))), H=matrix(NA))
model = fitSSM(inits=c(log(var(Nile)),log(var(Nile))), model=model,
method="BFGS")$model
out = KFS(model, filtering="state",smoothing = c("state","disturbance"),
simplify = F)
### Plotting results
par(mfrow=c(2,2))
conf.bands = cbind(out$a, as.vector(out$a) +
(sqrt(cbind(out$P))*qnorm(0.95))%*% (t(c(-1,1)) ) )
temp = cbind(Nile, conf.bands[-1,])
cols = c("grey","blue","red","red")
lwd = c(1,2,1,1)
lty = c(1,1,2,2)
plot.ts(temp, plot.type="single", col=cols, lwd=lwd, lty=lty,
xlab="", ylab="", main="i")
legend("topright",
legend=c("Observation Data", "Filtered state", "Confidence intervals"),
col = c("grey","blue","red"), lty = c(1,1,2), ylab = c(1,2,1), bty="n",
cex = 0.9)
model = SSModel(Nile ~ SSMtrend(1,Q=list(matrix(NA))), H=matrix(NA))
model = fitSSM(inits=c(log(var(Nile)),log(var(Nile))), model=model,
method="BFGS")$model
out = KFS(model, filtering="state",smoothing = c("state","disturbance"),
simplify = F)
### Plotting results
par(mfrow=c(2,2))
conf.bands = cbind(out$a, as.vector(out$a) +
(sqrt(cbind(out$P))*qnorm(0.95))%*% (t(c(-1,1)) ) )
temp = cbind(Nile, conf.bands[-1,])
cols = c("grey","blue","red","red")
lwd = c(1,2,1,1)
lty = c(1,1,2,2)
plot.ts(temp, plot.type="single", col=cols, lwd=lwd, lty=lty,
xlab="", ylab="", main="i")
legend("topright",
legend=c("Observation Data", "Filtered state", "Confidence intervals"),
col = c("grey","blue","red"), lty = c(1,1,2), lwd = c(1,2,1), bty="n",
cex = 0.9)
legend("topright",
legend=c("Observation Data", "Filtered state", "Confidence intervals"),
col = c("grey","blue","red"), lty = c(1,1,2), lwd = c(1,2,1), bty="n",
cex = 0.9)
model = SSModel(Nile ~ SSMtrend(1,Q=list(matrix(NA))), H=matrix(NA))
model = fitSSM(inits=c(log(var(Nile)),log(var(Nile))), model=model,
method="BFGS")$model
out = KFS(model, filtering="state",smoothing = c("state","disturbance"),
simplify = F)
### Plotting results
par(mfrow=c(2,2))
conf.bands = cbind(out$a, as.vector(out$a) +
(sqrt(cbind(out$P))*qnorm(0.95))%*% (t(c(-1,1)) ) )
temp = cbind(Nile, conf.bands[-1,])
cols = c("grey","blue","red","red")
lwd = c(1,2,1,1)
lty = c(1,1,2,2)
plot.ts(temp, plot.type="single", col=cols, lwd=lwd, lty=lty,
xlab="", ylab="", main="i")
legend("topright",
legend=c("Observation Data", "Filtered state", "Confidence intervals"),
col = c("grey","blue","red"), lty = c(1,1,2), lwd = c(1,2,1), bty="n",
cex = 0.9)
temp = ts(c(out$P[-1], start=1871))
plot(temp, col="blue", lwd=2, xlab="", ylab="", main="ii")
temp = ts(c(out$v[-1], start=1871))
plot(temp, col="blue", lwd=2, xlab="", ylab="", main="iii")
abline(h=0, col="grey")
temp = ts(c(out$F[-1], start=1871))
plot(temp, col="blue", lwd=2, xlab="", ylab="", main="iv")
import(dplyr)
package(dplyr)
library(dplyr)
path = "C:/Users/Sebastien David/Documents/Master 2/Semester 2/2. Machine Learning/Kaggle Competitions/Titanic/train.csv"
df = read.table(path)
df = read_csv(path)
df = read_fwf(path)
library(tidyr)
install.packages("tidyr")
df = read_csv(path)
df = read_table(path)
df
library(tidyr)
file = "C:/Users/Sebastien David/Documents/Master 2/Semester 2/2. Machine Learning/Kaggle Competitions/Titanic/train.csv"
df = read_table(file=path)
df = read_fwf(file=path)
df = read.csv(file=path)
df
View(df)
install.packages("Amelia")
library(Amelia)
missmap(df)
df$Age[is.na(df$Age)] = mean(df&Age, na.rm=T)
df = read.csv(file=path, header=T, na.strings=c(""))
View(df)
missmap(df)
missmap(df)
missmap(df)
df$Age[is.na(df$Age)] = mean(df&Age, na.rm=T)
data = subset(df,select=c(2,3,5,6,7,8,10,12))
df$Age[is.na(df$Age)] = mean(df$Age, na.rm=T)
data = subset(df,select=c(2,3,5,6,7,8,10,12))
is.factor(df$Survived)
is.factor(df$Sex)
is.factor(df&Embarked)
is.factor(df$Embarked)
col(df)
cols(df)
row(df)
nrow(df)
ncol(df)
891 * 1./3.
891 - 891 * 1./3.
train_data = data[0:600]
train_data = data[1:600,:]
train_data = data[1:600,]
train_data = data[0:600,]
nrow(train_data)
train_data
test_data = data[601:,]
train_data = data[0:600,]
test_data = data[601:891,]
test_data
model = glm(Survived ~ ., family=binomial(link='logit'), data=train_data)
summary(model)
for(i in 2011:2015){
print(i)
}
library(MASS)
install.packages('faraway')
library(faraway)
library(rpart)
data(ozone)
dim(ozone)
dimnames(ozone)
dimnames(ozone)[[2]]
dimnames(ozone)[[2]]
summary(ozone)
pairs(ozone, pch='.')
roz = rpart(formula = O3 ~ ., data = ozone)
plot(roz, margin=.10)
text(roz)
plot(roz, compress=T, uniform=T, branch=0.4, margin=.10)
text(roz)
library(MASS)
library(faraway)
library(rpart)  # for regression trees
data(ozone)
dim(ozone)
dimnames(ozone)[[2]]
summary(ozone)
pairs(ozone, pch='.')
roz = rpart(formula = O3 ~ ., data = ozone)
plot(roz, compress=T, uniform=T, branch=0.4, margin=.10)
text(roz)
dimnames(ozone)[[2]]
View(ozone)
install.packages("FactoMineR")
library(FactoMineR)
temperature = read.table("http://factominer.free.fr/livre/temperat.csv",
header=TRUE, sep=";", dec=".", row.names = 1)
View(temperature)
res = PCA(x = temperature, ind.sup = 24:35, quanti.sup = 13:16,
quali.sup = 17)
res = PCA(X = temperature, ind.sup = 24:35, quanti.sup = 13:16,
quali.sup = 17)
plot.PCA(res, choix="ind", habillage=17)
library(dplyr)
library(tidyr)
file = "C:/Users/Sebastien David/Documents/Master 2/Semester 2/2. Machine Learning/Kaggle Competitions/Titanic/train.csv"
df = read.csv(file=path, header=T, na.strings=c(""))
View(df)
library(dplyr)
library(tidyr)
file = "C:/Users/Sebastien David/Documents/Master 2/Semester 2/2. Machine Learning/Kaggle Competitions/Titanic/train.csv"
df = read.csv(file=path, header=T, na.strings=c(""))
df = read.csv(file=file, header=T, na.strings=c(""))
View(df)
library(Amelia)
missmap(df)
path = "C:/Users/Sebastien David/MOOC-Multivariate-Data-Analysis/Principal Component Analysis/AnaDo_JeuDonnees_FertiliteEurope.csv"
df = read.table(path)
df = read.table(path, header=TRUE, sep=";", check.names=FALSE, fileEncoding="latin1", row.names=1)
library(dplyr)
View(df)
nrow(df)
ncol(df)
dimnames(df)
dimnames(df)[[2]]
library(Amelia)
missmap(df)
summary(df)
library(FactoMineR)
pca = PCA(df)
dimnames(df)[[2]]
pca = PCA(df, quali.sup = 7)
pca
round(pca$eig, 2)
x <- 3.+ 2
print(x)
setwd(dir = 'C:/Users/Sebastien David/R-Data-Science')
write.csv(mtcars, file='my.exemple.csv')
df = read.csv('my.exemple.csv')
df
head(df)
class(df)
install.packages('readxl')
library(readxl)
library(readxl)
excel_sheets('Sample-Sales-Data.xlsx')
df = read_excel('Sample-Sales-Data.xlsx', sheet='Sheet1')
head(df)
head(df)
sum(df$Value)
summary(df)
entire.workbook = lapply(excel_sheets('Sample-Sales-Data.xlsx'))
entire.workbook = lapply(excel_sheets('Sample-Sales-Data.xlsx'),
read_excel, path='Sample-Sales-Data.xlsx')
entire.workbook
install.packages('xlsx')
library(xlsx)
write.xlsx(mtcars, 'output.xlsx')
demo(package='rvest')
install.packages('rvest')
library(rvest)
demo(package='rvest')
demo(package='rvest', topic='tripadvisor')
lego_movie = read_html('http://www.imdb.com/title/tt1490017/')
lego_movie
psycho_pass = read_html('https://www.imdb.com/title/tt2379308/?ref_=fn_al_tt_1')
psycho_pass %>%
html_node('strong span') %>%
html_text() %>%
as.numeric()
apocalypse_now = read_html('https://www.imdb.com/title/tt0078788/')
psycho_pass %>%
html_node('strong span') %>%
html_text() %>%
as.numeric()
apocalypse_now %>%
html_node('strong span') %>%
html_text() %>%
as.numeric()
apocalypse_now %>%
html_nodes('#titleCast .itemprop span') %>%
html_text()
apocalypse_now %>%
html_nodes('table') %>%
.[[3]] %>%
html_table()
apocalypse_now %>%
html_nodes('table') %>%
.[[1]] %>%
html_table()
apocalypse_now %>%
html_nodes('table') %>%
.[[2]] %>%
html_table()
apocalypse_now %>%
html_nodes('table') %>%
.[[3]] %>%
html_table()
apocalypse_now %>%
html_nodes('table') %>%
.[[1]] %>%
html_table()
